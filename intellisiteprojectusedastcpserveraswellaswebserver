# in this we have used the esp32 as a tcp ip server and a web server. i have used the two thread to make it run parally. i can read the current ip address and change the ip through web also to make more reliable. otherwise we need to run it each time and check through hercules. sometimes we forgot the ip address also.
import socket
import network
import _thread as thread
import machine
import time

# WiFi configuration
WIFI_SSID = "Airtel_tejv_3002"
WIFI_PASSWORD = "air73137"

# Default static IP configuration
DEFAULT_STATIC_IP = "192.168.1.151"
SUBNET_MASK = "255.255.255.0"
GATEWAY = "192.168.1.1"
DNS = "8.8.8.8"

# TCP/IP server configuration
TCP_PORT = 6000

# File for storing IP address
IP_FILE = "config.txt"

# HTML template
html = """<!DOCTYPE html>
<html>
<head><title>ESP32 IP Configuration</title></head>
<body>
  <h1>Current IP Address: {current_ip}</h1>
  <form method="post" action="/update_ip">
    New IP Address: <input type="text" name="new_ip" required><br><br>
    <input type="submit" value="Change IP">
  </form>
</body>
</html>
"""

# Read current IP address from file
def read_ip():
    try:
        with open(IP_FILE, "r") as f:
            return f.read().strip()
    except OSError:
        return DEFAULT_STATIC_IP  # Default IP address if file not found

# Write new IP address to file
def write_ip(new_ip):
    with open(IP_FILE, "w") as f:
        f.write(new_ip)

# Connect to WiFi with static IP
def connect_wifi():
    sta_if = network.WLAN(network.STA_IF)
    if not sta_if.isconnected():
        print("Connecting to WiFi...")
        sta_if.active(True)
        current_ip = read_ip()
        sta_if.ifconfig((current_ip, SUBNET_MASK, GATEWAY, DNS))
        sta_if.connect(WIFI_SSID, WIFI_PASSWORD)
        while not sta_if.isconnected():
            pass
    print("WiFi connected:", sta_if.ifconfig())
    return sta_if.ifconfig()[0]  # Return the IP address

# Restart ESP32
def restart_esp32():
    print("Restarting ESP32...")
    time.sleep(1)
    machine.reset()

# Setup TCP/IP server
def setup_server(tcp_ip):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.bind((tcp_ip, TCP_PORT))
    sock.listen(5)
    print(f"TCP/IP Server listening on {tcp_ip}:{TCP_PORT}")

    while True:
        client_socket, addr = sock.accept()
        print(f"[*] Accepted connection from {addr}")
        thread.start_new_thread(handle_client, (client_socket,))

# Handle TCP/IP client requests
def handle_client(client_socket):
    try:
        while True:
            request = client_socket.recv(1024).decode('utf-8')
            if not request:
                break  # Exit the loop if no data is received

            print('Received:', request)
            
            if request == "|OPENEN%":
                # Trigger relay or perform action
                print("Relay triggered")
                client_socket.send("Relay triggered".encode('utf-8'))
            elif request == "Hi":
                client_socket.send("connected".encode('utf-8'))
            elif request == "READIP":
                current_ip = read_ip()
                client_socket.send(current_ip.encode('utf-8'))
            elif request.startswith("WRITEIP:"):
                new_ip = request.split(":")[1]
                write_ip(new_ip)
                client_socket.send(f"IP changed to {new_ip}. Restarting...".encode('utf-8'))
                restart_esp32()
            else:
                client_socket.send("Invalid Command".encode('utf-8'))
    except Exception as e:
        print('Error:', e)
    finally:
        client_socket.close()
        print("Connection closed")

# HTTP server request handler
def http_handler(conn, addr):
    try:
        request = conn.recv(1024)
        request = request.decode('utf-8')
        print(f"Content = {request}")

        if 'GET / ' in request:
            conn.send('HTTP/1.1 200 OK\nContent-Type: text/html\nConnection: close\n\n')
            conn.send(html.format(current_ip=read_ip()))
        elif 'POST /update_ip ' in request:
            # Extract the new IP address from the POST request
            post_data = request.split('\r\n\r\n')[1]
            new_ip = post_data.split('=')[1]

            # Update the IP address
            write_ip(new_ip)

            # Send response and restart ESP32
            conn.send('HTTP/1.1 200 OK\nContent-Type: text/html\nConnection: close\n\n')
            conn.send(f"<html><body><h1>IP changed to {new_ip}. Restarting...</h1></body></html>")
            restart_esp32()
    except Exception as e:
        print('Error:', e)
    finally:
        conn.close()

# Setup HTTP server
def setup_http_server(tcp_ip):
    http_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    http_sock.bind((tcp_ip, 80))
    http_sock.listen(1)
    print(f"HTTP Server listening on {tcp_ip}:80")

    while True:
        conn, addr = http_sock.accept()
        print(f'Got a connection from {addr}')
        thread.start_new_thread(http_handler, (conn, addr))

# Main execution
tcp_ip = connect_wifi()
write_ip(tcp_ip)  # Store the current IP address
thread.start_new_thread(setup_server, (tcp_ip,))
thread.start_new_thread(setup_http_server, (tcp_ip,))

while True:
    pass  # Keep the main thread running

#EX-2 in this i have used tcp ip server with lan or tcp ip server with wifi and web server with the esp32. it is using lan8720 module. it will choose whether the lan is connected or not if lan is connected then it goes with lan tcp ip server and if the lan is not connected then it goes with wifi tcp ip server. and it also allows to go with the webserver where it shows me the current ip address and i can also change the ip address from the web server
import socket
import network
import _thread as thread
import machine
import time

# WiFi configuration
WIFI_SSID = "Airtel_tejv_3002"
WIFI_PASSWORD = "air73137"

# Default static IP configuration
DEFAULT_STATIC_IP = "192.168.1.151"
SUBNET_MASK = "255.255.255.0"
GATEWAY = "192.168.1.1"
DNS = "8.8.8.8"

# TCP/IP server configuration
TCP_PORT = 6000

# File for storing IP address
IP_FILE = "config.txt"

# HTML template
html = """<!DOCTYPE html>
<html>
<head><title>ESP32 IP Configuration</title></head>
<body>
  <h1>Current IP Address: {current_ip}</h1>
  <form method="post" action="/update_ip">
    New IP Address: <input type="text" name="new_ip" required><br><br>
    <input type="submit" value="Change IP">
  </form>
</body>
</html>
"""

# Read current IP address from file
def read_ip():
    try:
        with open(IP_FILE, "r") as f:
            return f.read().strip()
    except OSError:
        return DEFAULT_STATIC_IP  # Default IP address if file not found

# Write new IP address to file
def write_ip(new_ip):
    with open(IP_FILE, "w") as f:
        f.write(new_ip)

# Connect to WiFi with static IP
def connect_wifi():
    sta_if = network.WLAN(network.STA_IF)
    if not sta_if.isconnected():
        print("Connecting to WiFi...")
        sta_if.active(True)
        current_ip = read_ip()
        sta_if.ifconfig((current_ip, SUBNET_MASK, GATEWAY, DNS))
        sta_if.connect(WIFI_SSID, WIFI_PASSWORD)
        while not sta_if.isconnected():
            pass
    print("WiFi connected:", sta_if.ifconfig())
    return sta_if.ifconfig()[0]  # Return the IP address

# Restart ESP32
def restart_esp32():
    print("Restarting ESP32...")
    time.sleep(1)
    machine.reset()

# Setup TCP/IP server
def setup_server(tcp_ip):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.bind((tcp_ip, TCP_PORT))
    sock.listen(5)
    print(f"TCP/IP Server listening on {tcp_ip}:{TCP_PORT}")

    while True:
        client_socket, addr = sock.accept()
        print(f"[*] Accepted connection from {addr}")
        thread.start_new_thread(handle_client, (client_socket,))

# Handle TCP/IP client requests
def handle_client(client_socket):
    try:
        while True:
            request = client_socket.recv(1024).decode('utf-8')
            if not request:
                break  # Exit the loop if no data is received

            print('Received:', request)
            
            if request == "|OPENEN%":
                # Trigger relay or perform action
                print("Relay triggered")
                client_socket.send("Relay triggered".encode('utf-8'))
            elif request == "Hi":
                client_socket.send("connected".encode('utf-8'))
            elif request == "READIP":
                current_ip = read_ip()
                client_socket.send(current_ip.encode('utf-8'))
            elif request.startswith("WRITEIP:"):
                new_ip = request.split(":")[1]
                write_ip(new_ip)
                client_socket.send(f"IP changed to {new_ip}. Restarting...".encode('utf-8'))
                restart_esp32()
            else:
                client_socket.send("Invalid Command".encode('utf-8'))
    except Exception as e:
        print('Error:', e)
    finally:
        client_socket.close()
        print("Connection closed")

# HTTP server request handler
def http_handler(conn, addr):
    try:
        request = conn.recv(1024)
        request = request.decode('utf-8')
        print(f"Content = {request}")

        if 'GET / ' in request:
            conn.send('HTTP/1.1 200 OK\nContent-Type: text/html\nConnection: close\n\n')
            conn.send(html.format(current_ip=read_ip()))
        elif 'POST /update_ip ' in request:
            # Extract the new IP address from the POST request
            post_data = request.split('\r\n\r\n')[1]
            new_ip = post_data.split('=')[1]

            # Update the IP address
            write_ip(new_ip)

            # Send response and restart ESP32
            conn.send('HTTP/1.1 200 OK\nContent-Type: text/html\nConnection: close\n\n')
            conn.send(f"<html><body><h1>IP changed to {new_ip}. Restarting...</h1></body></html>")
            restart_esp32()
    except Exception as e:
        print('Error:', e)
    finally:
        conn.close()

# Setup HTTP server
def setup_http_server(tcp_ip):
    http_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    http_sock.bind((tcp_ip, 80))
    http_sock.listen(1)
    print(f"HTTP Server listening on {tcp_ip}:80")

    while True:
        conn, addr = http_sock.accept()
        print(f'Got a connection from {addr}')
        thread.start_new_thread(http_handler, (conn, addr))

# Main execution
tcp_ip = connect_wifi()
write_ip(tcp_ip)  # Store the current IP address
thread.start_new_thread(setup_server, (tcp_ip,))
thread.start_new_thread(setup_http_server, (tcp_ip,))

while True:
    pass  # Keep the main thread running

#EX-3 in this code we have written the code and from the webpage we can also change the wifi credentials ssid and password and make it connects with the new wifi. and also i can change the ip address from this
import socket
import network
import _thread as thread
import machine
import time

# WiFi configuration
WIFI_SSID = "Airtel_tejv_3002"
WIFI_PASSWORD = "air73137"

# Default static IP configuration
DEFAULT_STATIC_IP = "192.168.1.151"
SUBNET_MASK = "255.255.255.0"
GATEWAY = "192.168.1.1"
DNS = "8.8.8.8"

# TCP/IP server configuration
TCP_PORT = 6000

# Files for configuration
IP_FILE = "config.txt"
WIFI_CONFIG_FILE = "wifi_config.txt"

# HTML template for IP configuration page
html = """<!DOCTYPE html>
<html>
<head><title>ESP32 IP Configuration</title></head>
<body>
  <h1>Current IP Address: {current_ip}</h1>
  <form method="post" action="/update_ip">
    New IP Address: <input type="text" name="new_ip" required><br><br>
    <input type="submit" value="Change IP">
  </form>
  <br>
  <form method="post" action="/update_wifi">
    WiFi SSID: <input type="text" name="wifi_ssid" required><br><br>
    WiFi Password: <input type="password" name="wifi_password" required><br><br>
    <input type="submit" value="Change WiFi">
  </form>
</body>
</html>
"""

# Read current IP address from file
def read_ip():
    try:
        with open(IP_FILE, "r") as f:
            return f.read().strip()
    except OSError:
        return DEFAULT_STATIC_IP  # Default IP address if file not found

# Write new IP address to file
def write_ip(new_ip):
    with open(IP_FILE, "w") as f:
        f.write(new_ip)

# Read WiFi SSID and password from file
def read_wifi_config():
    try:
        with open(WIFI_CONFIG_FILE, "r") as f:
            ssid, password = f.read().strip().split(",")
            return ssid, password
    except OSError:
        return None, None  # No file found
    except Exception as e:
        print("Error reading WiFi config file:", e)
        return None, None

# Write WiFi SSID and password to file
def write_wifi_config(ssid, password):
    with open(WIFI_CONFIG_FILE, "w") as f:
        f.write(f"{ssid},{password}")

# Connect to WiFi with dynamic IP
def connect_wifi():
    sta_if = network.WLAN(network.STA_IF)
    ssid, password = read_wifi_config()

    if not ssid:
        print("No WiFi credentials found. Using default.")
        ssid = WIFI_SSID
        password = WIFI_PASSWORD

    if not sta_if.isconnected():
        print("Connecting to WiFi...")
        sta_if.active(True)
        sta_if.connect(ssid, password)
        for _ in range(20):
            if sta_if.isconnected():
                break
            time.sleep(1)
        else:
            print("Failed to connect to WiFi.")
            return None

    # Configure static IP if necessary
    current_ip = read_ip()
    sta_if.ifconfig((current_ip, SUBNET_MASK, GATEWAY, DNS))

    # Print WiFi connection details
    if sta_if.isconnected():
        print(f"WiFi connected: {ssid} (IP: {sta_if.ifconfig()[0]})")
    else:
        print("WiFi not connected.")

    return sta_if.ifconfig()[0]  # Return the IP address

# Restart ESP32
def restart_esp32():
    print("Restarting ESP32...")
    time.sleep(1)
    machine.reset()

# Setup TCP/IP server
def setup_server(tcp_ip):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.bind((tcp_ip, TCP_PORT))
    sock.listen(5)
    print(f"TCP/IP Server listening on {tcp_ip}:{TCP_PORT}")

    while True:
        client_socket, addr = sock.accept()
        print(f"[*] Accepted connection from {addr}")
        thread.start_new_thread(handle_client, (client_socket,))

# Handle TCP/IP client requests
def handle_client(client_socket):
    try:
        while True:
            request = client_socket.recv(1024).decode('utf-8')
            if not request:
                break  # Exit the loop if no data is received

            print('Received:', request)
            
            if request == "|OPENEN%":
                # Trigger relay or perform action
                print("Relay triggered")
                client_socket.send("Relay triggered".encode('utf-8'))
            elif request == "Hi":
                client_socket.send("connected".encode('utf-8'))
            elif request == "READIP":
                current_ip = read_ip()
                client_socket.send(current_ip.encode('utf-8'))
            elif request.startswith("WRITEIP:"):
                new_ip = request.split(":")[1]
                write_ip(new_ip)
                client_socket.send(f"IP changed to {new_ip}. Restarting...".encode('utf-8'))
                restart_esp32()
            else:
                client_socket.send("Invalid Command".encode('utf-8'))
    except Exception as e:
        print('Error:', e)
    finally:
        client_socket.close()
        print("Connection closed")

# HTTP server request handler
def http_handler(conn, addr):
    try:
        request = conn.recv(1024)
        request = request.decode('utf-8')
        print(f"Content = {request}")

        if 'GET / ' in request:
            conn.send('HTTP/1.1 200 OK\nContent-Type: text/html\nConnection: close\n\n')
            conn.send(html.format(current_ip=read_ip()).encode('utf-8'))
        elif 'POST /update_ip ' in request:
            # Extract the new IP address from the POST request
            post_data = request.split('\r\n\r\n')[1]
            new_ip = post_data.split('=')[1]

            # Update the IP address
            write_ip(new_ip)

            # Send response and restart ESP32
            conn.send('HTTP/1.1 200 OK\nContent-Type: text/html\nConnection: close\n\n')
            conn.send(f"<html><body><h1>IP changed to {new_ip}. Restarting...</h1></body></html>".encode('utf-8'))
            restart_esp32()
        elif 'POST /update_wifi ' in request:
            # Extract the new WiFi credentials from the POST request
            post_data = request.split('\r\n\r\n')[1]
            wifi_ssid = post_data.split('&')[0].split('=')[1]
            wifi_password = post_data.split('&')[1].split('=')[1]

            # Update the WiFi configuration
            write_wifi_config(wifi_ssid, wifi_password)

            # Send response and restart ESP32
            conn.send('HTTP/1.1 200 OK\nContent-Type: text/html\nConnection: close\n\n')
            conn.send("<html><body><h1>WiFi credentials updated. Restarting...</h1></body></html>".encode('utf-8'))
            restart_esp32()
    except Exception as e:
        print('Error:', e)
    finally:
        conn.close()

# Setup HTTP server
def setup_http_server(tcp_ip):
    http_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    http_sock.bind((tcp_ip, 80))
    http_sock.listen(1)
    print(f"HTTP Server listening on {tcp_ip}:80")

    while True:
        conn, addr = http_sock.accept()
        print(f'Got a connection from {addr}')
        thread.start_new_thread(http_handler, (conn, addr))

# Main execution
tcp_ip = connect_wifi()
write_ip(tcp_ip)  # Store the current IP address
thread.start_new_thread(setup_server, (tcp_ip,))
thread.start_new_thread(setup_http_server, (tcp_ip,))

while True:
    pass  # Keep the main thread running




#EX-4 same thing using the arduino ide using esp32 single core. any one will work at a time
#include <WiFi.h>
#include <WiFiClient.h>
#include <WebServer.h>
#include <FS.h>

// WiFi configuration
const char* WIFI_SSID = "Airtel_tejv_3002";
const char* WIFI_PASSWORD = "air73137";

// Default static IP configuration
IPAddress defaultStaticIP(192, 168, 1, 151);
IPAddress subnet(255, 255, 255, 0);
IPAddress gateway(192, 168, 1, 1);
IPAddress dns(8, 8, 8, 8);

// TCP/IP server configuration
const int TCP_PORT = 6000;

// SPIFFS file paths
const char* IP_FILE = "/config.txt";
const char* WIFI_CONFIG_FILE = "/wifi_config.txt";
const char* HTML_FILE = "/index.html";

WebServer server(TCP_PORT);

String html = ""; // HTML template will be read from SPIFFS

// Read current IP address from file
String readIP() {
  File file = SPIFFS.open(IP_FILE, "r");
  if (!file) {
    return defaultStaticIP.toString(); // Default IP address if file not found
  }
  String ip = file.readStringUntil('\n');
  file.close();
  return ip;
}

// Write new IP address to file
void writeIP(String newIP) {
  File file = SPIFFS.open(IP_FILE, "w");
  if (file) {
    file.println(newIP);
    file.close();
  }
}

// Read WiFi SSID and password from file
void readWiFiConfig(String& ssid, String& password) {
  File file = SPIFFS.open(WIFI_CONFIG_FILE, "r");
  if (file) {
    ssid = file.readStringUntil(',');
    password = file.readStringUntil('\n');
    file.close();
  }
}

// Write WiFi SSID and password to file
void writeWiFiConfig(String ssid, String password) {
  File file = SPIFFS.open(WIFI_CONFIG_FILE, "w");
  if (file) {
    file.print(ssid);
    file.print(",");
    file.println(password);
    file.close();
  }
}

// Connect to WiFi with dynamic IP
void connectWiFi() {
  String ssid, password;
  readWiFiConfig(ssid, password);

  if (ssid.length() == 0) {
    Serial.println("No WiFi credentials found. Using default.");
    ssid = WIFI_SSID;
    password = WIFI_PASSWORD;
  }

  WiFi.begin(ssid.c_str(), password.c_str());
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }

  // Configure static IP if necessary
  IPAddress currentIP(readIP().c_str());
  WiFi.config(currentIP, gateway, subnet, dns);

  // Print WiFi connection details
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println();
    Serial.print("WiFi connected: ");
    Serial.print(WiFi.SSID());
    Serial.print(" (IP: ");
    Serial.print(WiFi.localIP());
    Serial.println(")");
  } else {
    Serial.println("WiFi not connected.");
  }
}

// Handle TCP/IP client requests
void handleClient() {
  WiFiClient client = server.available();
  if (!client) {
    return;
  }

  while (client.connected()) {
    if (client.available()) {
      String request = client.readStringUntil('\r');
      Serial.println("Request: " + request);

      if (request.indexOf("|OPENEN%") != -1) {
        // Handle relay trigger or other actions
        client.println("Relay triggered");
      } else if (request == "Hi") {
        client.println("connected");
      } else if (request == "READIP") {
        String currentIP = readIP();
        client.println(currentIP);
      } else if (request.startsWith("WRITEIP:")) {
        String newIP = request.substring(8);
        writeIP(newIP);
        client.println("IP changed to " + newIP + ". Restarting...");
        delay(1000);
        ESP.restart();
      } else {
        client.println("Invalid Command");
      }
    }
  }
  client.stop();
}

// HTTP server request handler
void httpHandler() {
  server.on("/", HTTP_GET, [](){
    server.send(200, "text/html", html);
  });

  server.on("/update_ip", HTTP_POST, [](){
    String newIP = server.arg("new_ip");
    writeIP(newIP);
    server.send(200, "text/html", "<html><body><h1>IP changed to " + newIP + ". Restarting...</h1></body></html>");
    delay(1000);
    ESP.restart();
  });

  server.on("/update_wifi", HTTP_POST, [](){
    String wifiSSID = server.arg("wifi_ssid");
    String wifiPassword = server.arg("wifi_password");
    writeWiFiConfig(wifiSSID, wifiPassword);
    server.send(200, "text/html", "<html><body><h1>WiFi credentials updated. Restarting...</h1></body></html>");
    delay(1000);
    ESP.restart();
  });

  server.begin();
  Serial.println("HTTP server started");
}

void setup() {
  Serial.begin(115200);

  if (!SPIFFS.begin()) {
    Serial.println("Failed to mount SPIFFS");
    return;
  }

  // Load HTML template from SPIFFS
  File file = SPIFFS.open(HTML_FILE, "r");
  if (file) {
    html = file.readString();
    file.close();
  }

  connectWiFi();
  httpHandler();
}

void loop() {
  server.handleClient();
  handleClient();
}


#EX-5 same thing using the arduino ide using esp32 sing dual core
#include <WiFi.h>
#include <WiFiClient.h>
#include <WebServer.h>
#include <FS.h>

// WiFi configuration
const char* WIFI_SSID = "Airtel_tejv_3002";
const char* WIFI_PASSWORD = "air73137";

// Default static IP configuration
IPAddress defaultStaticIP(192, 168, 1, 151);
IPAddress subnet(255, 255, 255, 0);
IPAddress gateway(192, 168, 1, 1);
IPAddress dns(8, 8, 8, 8);

// TCP/IP server configuration
const int TCP_PORT = 6000;

// SPIFFS file paths
const char* IP_FILE = "/config.txt";
const char* WIFI_CONFIG_FILE = "/wifi_config.txt";
const char* HTML_FILE = "/index.html";

WebServer httpServer(80); // HTTP server on port 80
WiFiServer tcpServer(TCP_PORT); // TCP server on port 6000

String html = ""; // HTML template will be read from SPIFFS

// Read current IP address from file
String readIP() {
  File file = SPIFFS.open(IP_FILE, "r");
  if (!file) {
    return defaultStaticIP.toString(); // Default IP address if file not found
  }
  String ip = file.readStringUntil('\n');
  file.close();
  return ip;
}

// Write new IP address to file
void writeIP(String newIP) {
  File file = SPIFFS.open(IP_FILE, "w");
  if (file) {
    file.println(newIP);
    file.close();
  }
}

// Read WiFi SSID and password from file
void readWiFiConfig(String& ssid, String& password) {
  File file = SPIFFS.open(WIFI_CONFIG_FILE, "r");
  if (file) {
    ssid = file.readStringUntil(',');
    password = file.readStringUntil('\n');
    file.close();
  }
}

// Write WiFi SSID and password to file
void writeWiFiConfig(String ssid, String password) {
  File file = SPIFFS.open(WIFI_CONFIG_FILE, "w");
  if (file) {
    file.print(ssid);
    file.print(",");
    file.println(password);
    file.close();
  }
}

// Connect to WiFi with dynamic IP
void connectWiFi() {
  String ssid, password;
  readWiFiConfig(ssid, password);

  if (ssid.length() == 0) {
    Serial.println("No WiFi credentials found. Using default.");
    ssid = WIFI_SSID;
    password = WIFI_PASSWORD;
  }

  WiFi.begin(ssid.c_str(), password.c_str());
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }

  // Configure static IP if necessary
  IPAddress currentIP(readIP().c_str());
  WiFi.config(currentIP, gateway, subnet, dns);

  // Print WiFi connection details
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println();
    Serial.print("WiFi connected: ");
    Serial.print(WiFi.SSID());
    Serial.print(" (IP: ");
    Serial.print(WiFi.localIP());
    Serial.println(")");
  } else {
    Serial.println("WiFi not connected.");
  }
}

// Handle TCP/IP client requests
void handleTCPClient(void * parameter) {
  tcpServer.begin();
  while (true) {
    WiFiClient client = tcpServer.available();
    if (!client) {
      delay(10);
      continue;
    }

    while (client.connected()) {
      if (client.available()) {
        String request = client.readStringUntil('\r');
        Serial.println("Request: " + request);

        if (request.indexOf("|OPENEN%") != -1) {
          // Handle relay trigger or other actions
          client.println("Relay triggered");
        } else if (request == "Hi") {
          client.println("connected");
        } else if (request == "READIP") {
          String currentIP = readIP();
          client.println(currentIP);
        } else if (request.startsWith("WRITEIP:")) {
          String newIP = request.substring(8);
          writeIP(newIP);
          client.println("IP changed to " + newIP + ". Restarting...");
          delay(1000);
          ESP.restart();
        } else {
          client.println("Invalid Command");
        }
      }
    }
    client.stop();
  }
}

// HTTP server request handler
void handleHTTPServer(void * parameter) {
  httpServer.on("/", HTTP_GET, [](){
    httpServer.send(200, "text/html", html);
  });

  httpServer.on("/update_ip", HTTP_POST, [](){
    String newIP = httpServer.arg("new_ip");
    writeIP(newIP);
    httpServer.send(200, "text/html", "<html><body><h1>IP changed to " + newIP + ". Restarting...</h1></body></html>");
    delay(1000);
    ESP.restart();
  });

  httpServer.on("/update_wifi", HTTP_POST, [](){
    String wifiSSID = httpServer.arg("wifi_ssid");
    String wifiPassword = httpServer.arg("wifi_password");
    writeWiFiConfig(wifiSSID, wifiPassword);
    httpServer.send(200, "text/html", "<html><body><h1>WiFi credentials updated. Restarting...</h1></body></html>");
    delay(1000);
    ESP.restart();
  });

  httpServer.begin();
  Serial.println("HTTP server started");

  while (true) {
    httpServer.handleClient();
    delay(10);
  }
}

void setup() {
  Serial.begin(115200);

  if (!SPIFFS.begin()) {
    Serial.println("Failed to mount SPIFFS");
    return;
  }

  // Load HTML template from SPIFFS
  File file = SPIFFS.open(HTML_FILE, "r");
  if (file) {
    html = file.readString();
    file.close();
  }

  connectWiFi();
  
  // Create tasks for handling TCP and HTTP servers
  xTaskCreatePinnedToCore(handleTCPClient, "handleTCPClient", 8192, NULL, 1, NULL, 0);
  xTaskCreatePinnedToCore(handleHTTPServer, "handleHTTPServer", 8192, NULL, 1, NULL, 1);
}

void loop() {
  // Nothing to do here, tasks are running in parallel
}

